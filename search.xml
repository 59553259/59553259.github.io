<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[从输入域名到页面展示的全过程]]></title>
    <url>%2F2018%2F08%2F19%2FpageShow%2F</url>
    <content type="text"><![CDATA[从浏览器输入域名，到页面展示的过程大致可简单概括为以下几个部分：1.解析输入的域名，获得该域名的IP地址2.向服务器发送请求3.服务器收到、处理、返回请求4.浏览器渲染页面 域名解析DNS查找域名的IP地址会先在缓存中进行查询，其先后顺序为： 1.浏览器缓存 ：在浏览器的缓存中查找是否有该域名对应的IP地址，若有则直接返回IP地址，若无则进行下一步 2.系统缓存 ：系统缓存指本地硬盘上的hosts文件，该文件一般位于系统的C:\Windows\System32\drivers\etc\hosts 3.路由器缓存 : 查找路由器缓存中是否有对应的IP地址 如果在浏览器缓存、系统缓存、路由器缓存中都没有找到ip地址，浏览器便会发起一个DNS请求到本地DNS服务器本地DNS服务器一般是由你的网络接入的服务商提供，如：电信、联通、移动 4.本地DNS服务器 ：DNS请求到达本地DNS服务器后，本地DNS服务器会先在自己的缓存中查找如果找到了就返回找到的IP,这个过程是以递归的方式进行的如果没有，则本地DNS服务器继续向根域名服务器发起请求 5.根域名服务器：本地DNS继续向根域名服务器发出查询请求根域名服务器并没有记录域名与IP之间的对应关系根域名服务器告诉本地DNS服务器，可以到哪个顶级域名服务器上查询 6.顶级域名服务器：本地DNS继续向顶级域名服务器发出查询请求顶级域名服务器接收到请求后，会告诉本地DNS到权限域名服务器上去查询 7.权限域名服务器 ：本地DNS继续向权限域名服务器发出查询请求权限域名服务器查询到域名对应的IP后，将IP地址返回给本地DNS 本地DNS接收后将其保存到自己的缓存中，以备下次查询，提高查询速度至此，一个IP地址的查询就此结束； 整个DNS域名解析是一个递归查询的过程本地域名服务器向根域名服务器、顶级域名服务器和主机域名服务器发起的查询请求是一个迭代查询的过程 发送请求浏览器拿到域名对应的IP地址之后，会向服务器发起TCP连接请求连接请求到达服务器端后，通过三次握手建立TCP连接建立TCP连接后，浏览器向服务器发送http请求 浏览器发送请求的端口为1024~65535的一个随机端口向服务器的请求端口为：HTTP协议使用80端口/8080端口，HTTPS使用443端口 响应请求服务器收到客户端请求后，对请求进行处理，包括访问数据库、获取需要获取的内容等然后服务器向浏览器返回一个HTTP响应，将请求的数据发送给浏览器浏览器收到请求后通过四次挥手释放TCP连接 渲染页面页面渲染主要分为以下几步： 1.浏览器把获取到的HTML代码解析成1个DOM树 HTML中的每个tag都是DOM树中的1个节点，根节点就是我们常用的document对象DOM树里包含了所有HTML标签，包括display:none隐藏，还有用JS动态添加的元素等 2.浏览器把CSS解析成CSSOM(样式结构体)，在解析的过程中会去掉浏览器不能识别的样式 3.DOM Tree 和CSSOM组合后构建render tree render tree类似于DOM tree，但区别很大，render tree能识别样式，render tree中每个node都有自己的stylerender tree不包含隐藏的节点 (这些节点不会用于呈现，而且不会影响呈现的,比如display:none的节点)visibility:hidden隐藏的元素还是会包含到 render tree中的(visibility:hidden 会影响布局(layout)，会占有空间) 4.浏览器根据render tree渲染和展示页面 浏览器在构造页面时，当浏览器从服务器端接收到HTML文档时，会从上到下依次解析HTML文档，转换为DOM树在转换过程中，如果发现某个Node（节点）引用了CSS、IMG，则会发起一个request去请求CSS或IMG,而浏览器则会继续执行下面的HTML转换，而不等待request的返回,当request返回后，只需要把相应的内容放到对应的Node上即可但是当引用了JS的时候，浏览器发起一个JS的request请求后，会一直等待该请求的返回,因为浏览器需要构建一个稳定的DOM树，而JS代码很有可能会改变DOM结构,浏览器为了防止出现这种情况，所以会阻塞后续资源的下载 回流与重绘回流：当render tree中的一部分(或全部)因为元素的规模尺寸，布局，隐藏等改变而需要重新构建 每个页面至少需要一次回流，就是在页面第一次加载的时候 重绘:当render tree中的一些元素需要更新属性，而这些属性只是影响元素的外观，风格，而不会影响布局 回流必将引起重绘，而重绘不一定会引起回流在回流的时候，浏览器会使渲染树中受到影响的部分失效，并重新构造这部分渲染树,完成回流后，浏览器会重新绘制受影响的部分到屏幕中回流可以理解为render树的结构发生了变化，需要重新构建重绘指结构没有变化，只是一些对结构布局没有产生影响的元素发生了变化]]></content>
      <categories>
        <category>HTTP</category>
      </categories>
      <tags>
        <tag>HTTP</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Markdown基本语法]]></title>
    <url>%2F2018%2F08%2F17%2FMarkdown%2F</url>
    <content type="text"><![CDATA[前言在使用Hexo搭建博客系统后，通过hexo new XXX创建一个新的博客文章，编写博客内容所使用的模板为.md文件对此，有必要了解一下关于Markdown的基本语法，以提高写作效率。 Markdown介绍Markdown是一种可以使用普通文本编辑器编写的标记语言，通过简单的标记语法，它可以使普通文本内容具有一定的格式。优点： 纯文本格式，故可以用任何编辑器打开并编辑 语法简介易懂，具有很好的可读性 转化格式方便，可以轻松转化为Html、PPT、Word等格式文件 基本语法介绍标题在 Markdown 中，只需在文本前面加上#即可表示标题，标题总共六级同理，二级标题、三级标题、四级标题、五级标题和六级标题都只需要添加相应数量的#即可，标题字号便会相应降低。例如：123456# 一级标题## 二级标题### 三级标题#### 四级标题##### 五级标题###### 六级标题 注：#和标题之间建议保留一个字符的空格。 字体 加粗 :将要加粗的文字用两个*号包起来 **Bold** —– Bold 斜体 :将要倾斜的文字用一个*号包起来 斜体加粗 :将要倾斜加粗的文字用三个*号包起来 删除线 : 将要加删除线的文字用两个~~号包起来 引用 引用 :在引用的文字前加&gt;即可例如： &gt; 引用内容 引用内容 分割线 分割线 (HR) :三个或者三个以上的-或者*例如 : --- *** 链接 链接 :[超链接名](超链接地址)例如 :[百度](https://www.baidu.com/)显示为 :百度 图片12345![alt](address &quot;title&quot;)alt是指显示在图片下面的文字 address是指图片的地址title是指当鼠标移到图片上时显示的内容，title可有可无 例如 :![头像](source/uploads/touxiang.jpg) 列表无序列表语法：无序列表用- + *任何一种都可以例如 :12- 有序列表- 无序列表 显示为 : 有序列表 无序列表有序列表语法：数字加点例如 : 121.有序列表 2.无序列表 显示为：1.有序列表2.无序列表 列表嵌套在下一级的-符号前敲四个空格例如 :1234- 一级列表 - 二级列表 - 二级列表 - 二级列表 显示为： 一级列表 二级列表 二级列表 二级列表 表格语法为 :1234表头|表头|表头---|:--:|---:内容|内容|内容内容|内容|内容 第二行分割表头和内容文字默认居左--- 表示文字居左：--：表示文字居中----：表示文字居右显示为： 表头 表头 表头 内容 内容 内容 内容 内容 内容 内嵌代码单行代码：将代码用一个反引号包起来alert(&#39;Hello World&#39;); 多行代码：将代码用三个反引号包起来123alert(&apos;Hello World&apos;); alert(&apos;Hello World&apos;); alert(&apos;Hello World&apos;); 换行 段落 : 段落之间空一行 换行 : 一行结束时输入两个空格]]></content>
      <categories>
        <category>Markdown</category>
      </categories>
      <tags>
        <tag>Markdown</tag>
      </tags>
  </entry>
</search>
